from fpdf import FPDF
import os
from summary_generator import generate_summary_with_gemini

class PDFReport(FPDF):
    def header(self):
        # Header background
        self.set_fill_color(30, 134, 193)  # Blue
        self.rect(0, 0, 210, 20, "F")  # Full width rectangle

        # Logo placeholder (left side)
        # If you have a logo.png, replace with actual path
        # self.image("static/logo.png", 10, 5, 15, 15)

        # Title text
        self.set_xy(30, 7)
        self.set_text_color(255, 255, 255)
        self.set_font("Helvetica", "B", 16)
        self.cell(0, 10, "Athlyze Performance Report", border=False, ln=1, align="L")
        self.ln(5)

    def footer(self):
        # Footer background
        self.set_fill_color(33, 47, 60)  # Dark gray
        self.rect(0, 285, 210, 12, "F")

        # Footer text
        self.set_y(-10)
        self.set_text_color(255, 255, 255)
        self.set_font("Helvetica", "I", 8)
        self.cell(0, 10, "Generated by Athlyze AI-Powered Sports Ecosystem", align="C")

def generate_pdf_from_json(json_data, output_path="static/report.pdf"):
    os.makedirs(os.path.dirname(output_path), exist_ok=True)

    pdf = PDFReport()
    pdf.add_page()

    # Reset text color (after colored header)
    pdf.set_text_color(0, 0, 0)

    # Athlete Information Section
    pdf.set_font("Helvetica", "B", 14)
    pdf.set_text_color(46, 134, 193)
    pdf.cell(0, 10, "Athlete Information", ln=1)

    pdf.set_font("Helvetica", size=12)
    pdf.set_text_color(0, 0, 0)
    for key, value in json_data.get("information", {}).items():
        pdf.cell(0, 8, f"{key}: {value}", ln=1)

    pdf.ln(5)

        # Summary Section
    # Correctly getting the Summary string value
    pdf.set_font("Helvetica", "B", 14)
    pdf.set_text_color(46, 134, 193)
    pdf.cell(0, 10, "Summary", ln=1)

    pdf.set_font("Helvetica", size=12)
    pdf.set_text_color(0, 0, 0)
    summary_text = json_data.get("Summary", "N/A")
    pdf.multi_cell(0, 8, summary_text)

    pdf.ln(5)

    # Coach Feedback Section
    # Correctly getting the Coach Feedback string value
    pdf.set_font("Helvetica", "B", 14)
    pdf.set_text_color(46, 134, 193)
    pdf.cell(0, 10, "Coach Feedback", ln=1)

    pdf.set_font("Helvetica", size=12)
    pdf.set_text_color(0, 0, 0)
    coach_feedback_text = json_data.get("Coach Feedback", "N/A")
    pdf.multi_cell(0, 8, coach_feedback_text)
    # Save PDF
    pdf.output(output_path)
    return output_path

if __name__ == "__main__":
    # Example JSON data
    data = {
            "information": {
                "Name": "Rahul Kumar",
                "Age": "16",
                "Sport": "100m Sprint",
                "Region": "Bihar"
            },
                
            "exercise_type": "Pushup",
            "total_repetitions": 76,
            "workout_duration_sec": 76.65,
            "average_rep_time": 0.78,
            "min_angle_range": [
                56.05,
                149.47
            ],
            "workout_intensity": "High",
            "form_feedback": [
                "Form Issue: Go lower for a full range of motion.",
                "Form Issue: Keep your body straight to avoid sagging your hips.",
                "Form Issue: Keep your neck aligned with your spine."
            ]
            }
    


    

    json_data = generate_summary_with_gemini(data)
    print(json_data)
    pdf_path = generate_pdf_from_json(json_data)
    print(f"PDF generated at: {pdf_path}")
